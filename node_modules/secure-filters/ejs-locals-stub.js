/*jshint node:false, browser:true */
(function(root) {
/*global define */
'use strict';

function getEjsRenderer(ejsModule, bundle) {
  var stubFs = {};
  var stubPath = {};

  var modules = {
    ejs: ejsModule,
    fs: stubFs,
    path: stubPath
  };

  var module = { exports:{} };

  function require(name) {
    return modules[name];
  }

  /* path stub */

  stubPath.sep = '/';

  stubPath.dirname = function(name) {
    return name.substr(0,name.lastIndexOf('/'));
  };

  stubPath.resolve = function() {
    var args = Array.prototype.slice.call(arguments);
    return args.join(stubPath.sep);
  };

  stubPath.basename = function(name) {
    var dirname = stubPath.dirname(name);
    return name.substr(dirname.length);
  };

  stubPath.extname = function(name) {
    var basename = stubPath.basename(name);
    return basename.substr(basename.indexOf('.')+1);
  };

  /* fs stub */

  stubFs.readFileSync = function(name) {
    return bundle[name];
  };

  stubFs.existsSync = function(name) {
    return bundle[name] !== undefined;
  };

  // polyfill for Array.isArray() and Object.keys()

  function objectKeysPolyfill(obj) {
    var keys = [];
    for (var k in obj) {
      if (Object.hasOwnProperty(k)) {
        keys.push(k);
      }
    }
    return keys;
  }

  var Object__proto__toString = Object.prototype.toString;
  function arrayIsArrayPolyfill(obj) {
    return obj ?
      (typeof obj === 'object' && Object__proto__toString.call(obj) === '[Object array]') :
      false;
  }

  var Object__keys = (Object.keys && typeof Object.keys === 'function') ?
    Object.keys : objectKeysPolyfill;

  var Array__isArray = (Array.isArray && typeof Array.isArray === 'function') ?
    Array.isArray : arrayIsArrayPolyfill;

  /* XXX ejs-locals is inlined below! */
/* INLINE HERE */
  /* XXX ejs-locals is inlined above! */

  function wrappedRenderFile(file, options, fn) {
    if (!bundle[file]) {
      return fn(new Error('no such template'));
    }
    return renderFile(file, options, fn);
  }
  return wrappedRenderFile;
}


// AMD / RequireJS
if (typeof define !== 'undefined' && define.amd) {
  define('getEjsRenderer', [], function () {
    return getEjsRenderer;
  });
}
// CommonJS / Node.js
else if (typeof module !== 'undefined' && module.exports) {
  module.exports = getEjsRenderer;
}
// included directly via <script> tag
else {
  root.getEjsRenderer = getEjsRenderer;
}

}(this));
