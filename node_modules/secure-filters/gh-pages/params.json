{"name":"Secure-filters","tagline":"Anti-XSS Security Filters for EJS and More","body":"# secure-filters!\r\n\r\n`secure-filters` is a collection of sanitization functions (\"filters\") to\r\nprovide protection against [Cross-Site Scripting (XSS)](https://owasp.org/index.php/Cross-site_Scripting_%28XSS%29)\r\nand other injection attacks.\r\n\r\n[![Build Status](https://travis-ci.org/goinstant/secure-filters.png?branch=master)](https://travis-ci.org/goinstant/secure-filters)\r\n\r\nTable of select contents:\r\n\r\n- [About XSS](#about-xss)\r\n- [Usage](#usage)\r\n  - [Installation](#installation) - `npm install --save secure-filters`\r\n  - [EJS](#with-ejs)\r\n  - [Normal functions](#as-normal-functions)\r\n  - [Client-side](#client-side)\r\n- [Functions](#functions)\r\n  - [`html(value)`](#htmlvalue) - Sanitizes HTML contexts using entity-encoding.\r\n  - [`js(value)`](#jsvalue) - Sanitizes JavaScript string contexts using backslash-encoding.\r\n  - [`jsObj(value)`](#jsobjvalue) - Sanitizes JavaScript literals (numbers, strings,\r\n    booleans, arrays, and objects) for inclusion in an HTML script context.\r\n  - [`jsAttr(value)`](#jsattrvalue) - Sanitizes JavaScript string contexts _in an HTML attribute_\r\n    using a combination of entity- and backslash-encoding.\r\n  - [`uri(value)`](#urivalue) - Sanitizes URI contexts using percent-encoding.\r\n  - [`css(value)`](#cssvalue) - Sanitizes CSS contexts using backslash-encoding.\r\n  - [`style(value)`](#stylevalue) - Sanitizes CSS contexts _in an HTML `style` attribute_\r\n- [Contributing](#contributing)\r\n- [Support](#support)\r\n- [Legal](#legal)\r\n\r\n# About XSS\r\n\r\nXSS is the [#3 most critical security flaw affecting web\r\napplications](https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29)\r\nfor 2013, as determined by a broad consensus among\r\n[OWASP](https://www.owasp.org) members.\r\n\r\nTo effectively combat XSS, you must combine input validation with output\r\nsanitization.  **Using one or the other is not sufficient; you must apply\r\nboth!** This module aims to provide only output sanitization since there are\r\nplenty of JavaScript modules out there to do the validation part.\r\n\r\nWhichever input validation and output sanitization modules you end up using,\r\nplease review the code carefully and apply your own professional paranoia.\r\nTrust, but verify.\r\n\r\n### Input Validation\r\n\r\nYou can roll your own input validation or you can use an existing module.\r\nEither way, there are\r\n[many](https://owasp.org/index.php/Data_Validation)\r\n[important](https://goinstant.com/blog/the-importance-of-proper-input-validation-for-security)\r\n[rules](https://owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet) to follow.\r\n\r\n[This Stack-Overflow\r\nthread](http://stackoverflow.com/questions/4088723/validation-library-for-node-js)\r\nlists several input validation options specific to node.js.\r\n\r\nOne of those options is node-validator ([NPM](https://npmjs.org/package/validator),\r\n[github](https://github.com/chriso/node-validator)).\r\nIt provides an impressive list of chainable validators. In addition to\r\nvalidation, it gives a set of handy [sanitization\r\nfilters](https://github.com/chriso/node-validator#list-of-sanitization--filter-methods).\r\n\r\nValidator has an `xss()` filter function that can strip-out certain _common_ XSS\r\nattack-strings. But, _use caution_: XSS attacks can be so highly obfuscated that\r\nthey may be able to [bypass Validator's detection\r\nalgorithm](https://nealpoole.com/blog/2013/07/xss-filter-bypass-in-validator-nodejs-module/).\r\nValidator also has a 3rd party\r\n[express-validate](https://github.com/Dream-Web/express-validate) middleware\r\nmodule for use in the popular [Express](http://expressjs.com/) node.js server.\r\n\r\n# Usage\r\n\r\n`secure-filters` can be used with EJS or as normal functions.\r\n\r\n## Installation\r\n\r\n```sh\r\n  npm install --save secure-filters\r\n```\r\n\r\n:warning: **CAUTION**: If the `Content-Type` HTTP header for your document, or\r\nthe `<meta charset=\"\">` tag (or eqivalent) specifies a non-UTF-8 encoding these\r\nfilters _may not provide adequate protection_! Some browsers can treat some\r\ncharacters at Unicode code-points `0x00A0` and above as if they were `<` if the\r\nencoding is not set to UTF-8!\r\n\r\n## With EJS\r\n\r\nTo configure EJS, simply wrap your `require('ejs')` call.  This will import the\r\nfilters using the names pre-defined by this module.\r\n\r\n```js\r\n  var ejs = require('secure-filters').configure(require('ejs'));\r\n```\r\n\r\nThen, within an EJS template:\r\n\r\n```html\r\n  <script>\r\n    var config = <%-: config |jsObj%>;\r\n    var userId = parseInt('<%-: userId |js%>',10);\r\n  </script>\r\n  <a href=\"/welcome/<%-: userId |uri%>\">Welcome <%-: userName |html%></a>\r\n  <br>\r\n  <a href=\"javascript:activate('<%-: userId |jsAttr%>')\">Click here to activate</a>\r\n```\r\n\r\n### Alternative EJS uses.\r\n\r\nRather than importing the pre-defined names we've chosen, here are some other\r\nways to integrate `secure-filters` with EJS.\r\n\r\n#### Replacing EJS's default escape\r\n\r\nAs of EJS 0.8.4, you can replace the `escape()` function during template\r\ncompilation.  This allows `<%= %>` to be safer than [the\r\ndefault](#a-note-about--).\r\n\r\n```js\r\nvar escapeHTML = secureFilters.html;\r\nvar templateFn = ejs.compile(template, { escape: escapeHTML });\r\n```\r\n\r\n#### One-by-one\r\n\r\nIt's possible that the filter names pre-defined by this module interferes with\r\nexisting filters that you've written. Or, you may wish to import a sub-set of\r\nthe filters. In which case, you can simply assign properties to the\r\n`ejs.filters` object.\r\n\r\n```js\r\n  var secureFilters = require('secure-filters');\r\n  var ejs = require('ejs');\r\n  ejs.filters.secJS = secureFilters.js;\r\n```\r\n\r\n```html\r\n  <script>\r\n    var myStr = \"<%-: myVal | secJS %>\";\r\n  </script>\r\n```\r\n\r\n#### Parametric\r\n\r\nOr, you can namespace using a parametric style, similar to how EJS' pre-defined\r\n`get:'prop'` filter works:\r\n\r\n```js\r\n  var secureFilters = require('secure-filters');\r\n  var ejs = require('ejs');\r\n  ejs.filters.sec = function(val, context) {\r\n    return secureFilters[context](val);\r\n  };\r\n```\r\n\r\n```html\r\n  <script>\r\n    var myStr = \"<%-: myVal | sec:'js' %>\";\r\n  </script>\r\n```\r\n\r\n## As Normal Functions\r\n\r\nThe filter functions are just regular functions and can be used outside of EJS.\r\n\r\n```js\r\n  var htmlEscape = require('secure-filters').html;\r\n  var escaped = htmlEscape('\"><script>alert(\\'pwn\\')</script>');\r\n  assert.equal(escaped,\r\n    '&quot;&gt;&lt;script&gt;alert&#40;&#39;pwn&#39;&#41;&lt;&#47;script&gt;');\r\n```\r\n\r\n## Client-side\r\n\r\nYou can simply include the `lib/secure-filters.js` file itself to get started.\r\n\r\n```html\r\n  <script type=\"text/javascript\" src=\"path/to/secure-filters.js\"></script>\r\n  <script type=\"text/javascript\">\r\n    var escaped = secureFilters.html(userInput);\r\n    //...\r\n  </script>\r\n```\r\n\r\nWe've also added [AMD module\r\ndefinition](https://github.com/amdjs/amdjs-api/wiki/AMD) to `secure-filters.js`\r\nfor use in [Require.js](http://requirejs.org) and other AMD frameworks. We\r\ndon't pre-define a name, but suggest that you use 'secure-filters'.\r\n\r\n# Functions\r\n\r\nBy convention in the Contexts below, `USERINPUT` should be replaced with the\r\noutput of the filter function.\r\n\r\n### html(value)\r\n\r\nSanitizes output for HTML element and attribute contexts using entity-encoding.\r\n\r\nContexts:\r\n\r\n```html\r\n  <p>Hello, <span id=\"name\">USERINPUT</span></p>\r\n  <div class=\"USERINPUT\"></div>\r\n  <div class='USERINPUT'></div>\r\n```\r\n\r\n:warning: **CAUTION**: this is not the correct encoding for embedding the contents of\r\na `<script>` or `<style>` block (plus other blocks that cannot have\r\nentity-encoded characters).\r\n\r\nAny character not matched by `/[\\t\\n\\v\\f\\r ,\\.0-9A-Z_a-z\\-\\u00A0-\\uFFFF]/` is\r\nreplaced with an HTML entity.  Additionally, characters matched by\r\n`/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F]/` are converted to spaces to avoid\r\nbrowser quirks that interpret these as non-characters.\r\n\r\n#### A Note About `<%= %>`\r\n\r\nYou might be asking \"Why provide `html(var)`? EJS already does HTML escaping!\".\r\n\r\n[Prior to 0.8.5](https://github.com/visionmedia/ejs/blob/master/History.md#085--2013-11-21),\r\nEJS doesn't escape the `'` (apostrophe) character when using the `<%= %>`\r\nsyntax.  This can lead to XSS accidents!  Consider the template:\r\n\r\n```html\r\n  <img src='<%= prefs.avatar %>'>\r\n```\r\n\r\nWhen given user input `x' onerror='alert(1)`, the above gets rendered as:\r\n\r\n```html\r\n  <img src='x' onerror='alert(1)'>\r\n```\r\n\r\nWhich will cause the `onerror` javascript to run.  Using this module's filter\r\nshould prevent this.\r\n\r\n```html\r\n  <img src='<%-: prefs.avatar |html%>'>\r\n```\r\n\r\nWhen given user input `x' onerror='alert(1)`, the above gets rendered as:\r\n\r\n```html\r\n  <img src='x&#39; onerror&#61;&#39;alert&#40;1&#41;'>\r\n```\r\n\r\nWhich will not run the attacking script.\r\n\r\n\r\n### js(value)\r\n\r\nSanitizes output for JavaScript _string_ contexts using backslash-encoding.\r\n\r\n```html\r\n  <script>\r\n    var singleQuote = 'USERINPUT';\r\n    var doubleQuote = \"USERINPUT\";\r\n    var anInt = parseInt('USERINPUT', 10);\r\n    var aFloat = parseFloat('USERINPUT');\r\n    var aBool = ('USERINPUT' === 'true');\r\n  </script>\r\n```\r\n\r\n:warning: **CAUTION**: you need to always put quotes around the embedded value; don't\r\nassume that it's a bare int/float/boolean constant!\r\n\r\n:warning: **CAUTION**: this is not the correct encoding for the entire contents of a\r\n`<script>` block!  You need to sanitize each variable in-turn.\r\n\r\nAny character not matched by `/[,\\-\\.0-9A-Z_a-z]/` is escaped as `\\xHH` or\r\n`\\uHHHH` where `H` is a hexidecimal digit.  The shorter `\\x` form is used for\r\ncharaters in the 7-bit ASCII range (i.e. code point <= 0x7F).\r\n\r\n### jsObj(value)\r\n\r\nSanitizes output for a JavaScript literal in an HTML script context.\r\n\r\n```html\r\n  <script>\r\n    var config = USERINPUT;\r\n  </script>\r\n```\r\n\r\nThis function encodes the object with `JSON.stringify()`, then\r\nescapes certain characters.  Any character not matched by\r\n`/[\",\\-\\.0-9:A-Z\\[\\\\\\]_a-z{}]/` is escaped consistent with the\r\n[`js(value)`](#jsvalue) escaping above. Additionally, the sub-string `]]>` is\r\nencoded as `\\x5D\\x5D\\x3E` to prevent breaking out of CDATA context.\r\n\r\nBecause `<` and `>` are not matched characters, they get encoded as `\\x3C` and\r\n`\\x3E`, respectively. This prevents breaking out of a surrounding HTML\r\n`<script>` context.\r\n\r\nFor example, with a literal object like `{username:'Albert\r\n</script><script>alert(\"Pwnerton\")'}`, `jsObj()` gives output:\r\n\r\n```html\r\n  <script>\r\n    var config = {\"username\":\"\\x3C\\x2Fscript\\x3E\\x3Cscript\\x3Ealert\\x28\\\"Pwnerton\\\"\\x29\"};\r\n  </script>\r\n```\r\n\r\n#### JSON is not a subset of JavaScript\r\n\r\nArticle: [JSON isn't a JavaScript\r\nSubset](http://timelessrepo.com/json-isnt-a-javascript-subset).\r\n\r\nJSON is _almost_ a subset of JavaScript, but for two characters: [`LINE\r\nSEPARATOR` U+2028](http://www.fileformat.info/info/unicode/char/2028/index.htm)\r\nand [`PARAGRAPH SEPARATOR`\r\nU+2029](http://www.fileformat.info/info/unicode/char/2029/index.htm).  These\r\ntwo characters can't legally appear in JavaScript strings and must be escaped.\r\nDue to the ambiguity of these and other Unicode whitespace characters,\r\n`secure-filters` will backslash encode U+2028 as `\\u2028`, U+2029 as `\\u2029`,\r\netc.\r\n\r\n### jsAttr(value)\r\n\r\nSanitizes output for embedded HTML scripting attributes using a special\r\ncombination of backslash- and entity-encoding.\r\n\r\n```html\r\n  <a href=\"javascript:doActivate('USERINPUT')\">click to activate</a>\r\n  <button onclick=\"display('USERINPUT')\">Click To Display</button>\r\n```\r\n\r\nThe string `<ha>, 'ha', \"ha\"` is escaped to `&lt;ha&gt;, \\&#39;ha\\&#39;,\r\n\\&quot;ha\\&quot;`. Note the backslashes before the apostrophe and quote\r\nentities.\r\n\r\n### uri(value)\r\n\r\nSanitizes output in URI component contexts by using percent-encoding.\r\n\r\n```html\r\n  <a href=\"http://example.com/?this=USERINPUT&that=USERINPUT\">\r\n  <a href=\"http://example.com/api/v2/user/USERINPUT\">\r\n```\r\n\r\nThe ranges 0-9, A-Z, a-z, plus hypen, dot and underscore (`-._`) are\r\npreserved. Every other character is converted to UTF-8, then output as %XX\r\npercent-encoded octets, where X is an uppercase hexidecimal digit.\r\n\r\n**Note** that if composing a URL, the entire result should ideally be\r\nHTML-escaped before insertion into HTML. However, since Percent-encoding is\r\nalso HTML-safe, it may be sufficient to just URI-encode the untrusted\r\ncomponents if you know the rest is application-supplied.\r\n\r\n### css(value)\r\n\r\nSanitizes output in CSS contexts by using backslash encoding.\r\n\r\n```html\r\n  <style type=\"text/css\">\r\n    #user-USERINPUT {\r\n      background-color: #USERINPUT;\r\n    }\r\n  </style>\r\n```\r\n\r\n:warning: **CAUTION** this is not the correct filter for a `style=\"\"` attribute; use\r\nthe [`style(value)`](#stylevalue) filter instead!\r\n\r\n:warning: **CAUTION** even though this module prevents breaking out of CSS\r\ncontext, it is still somewhat risky to allow user-controlled input into CSS and\r\n`<style>` blocks. Be sure to combine CSS escaping with whitelist-based input\r\nsanitization! Here's a small sampling of what's possible:\r\n\r\n- https://www.computerworld.com/s/article/9221043/Opera_denies_refusing_to_patch_critical_vulnerability\r\n- http://html5sec.org/#43 - note the modern browser versions!\r\n\r\n\r\nThe ranges a-z, A-Z, 0-9 plus Unicode U+10000 and higher are preserved.  All\r\nother characters are encoded as `\\h `, where `h` is one one or more lowercase\r\nhexadecimal digits, including the trailing space.\r\n\r\nConfusingly, CSS allows `NO-BREAK SPACE` U+00A0 to be used in an identifier.\r\nBecause of this confusion, it's possible browsers treat it as whitespace, and\r\nso `secure-filters` escapes it.\r\n\r\nSince [the behaviour of NUL in CSS2.1 is\r\nundefined](http://www.w3.org/TR/CSS21/syndata.html#characters), it is replaced\r\nwith `\\fffd `, `REPLACEMENT CHARACTER` U+FFFD.\r\n\r\nFor example, the string `<wow>` becomes `\\3c wow\\3e ` (note the trailing space).\r\n\r\n### style(value)\r\n\r\nEncodes values for safe embedding in HTML style attribute context.\r\n\r\n**USAGE**: all instances of `USERINPUT` should be sanitized by this function\r\n\r\n```html\r\n  <div style=\"background-color: #USERINPUT;\"></div>\r\n```\r\n\r\n:warning: **CAUTION** even though this module prevents breaking out of style-attribute\r\ncontext, it is still somewhat risky to allow user-controlled input (see caveats\r\non [css](#cssvalue) above).  Be sure to combine with whitelist-based input\r\nsanitization!\r\n\r\nEncodes the value first as in the `css()` filter, then HTML entity-encodes the result.\r\n\r\nFor example, the string `<wow>` becomes `&#92;3c wow&#92;3e `.\r\n\r\n# Contributing\r\n\r\nIf you'd like to contribute to or modify secure-filters, here's a quick guide\r\nto get you started.\r\n\r\n## Development Dependencies\r\n\r\n- [node.js](http://nodejs.org) >= 0.10\r\n\r\n## Set-Up\r\n\r\nDownload via GitHub and install npm dependencies:\r\n\r\n```sh\r\ngit clone git@github.com:goinstant/secure-filters.git\r\ncd secure-filters\r\n\r\nnpm install\r\n```\r\n\r\n## Testing\r\n\r\nTesting is with the [mocha](https://github.com/visionmedia/mocha) framework.\r\nTests are located in the `tests/` directory.\r\n\r\nThe unit tests are run twice: once under node.js and once under\r\n[PhantomJS](http://phantomjs.org/). PhantomJS test files are located in the\r\n`static/` directory.\r\n\r\nTo run the tests:\r\n\r\n```sh\r\nnpm test\r\n```\r\n\r\n## Publishing\r\n\r\n1. `npm version patch` (increments `x` in `z.y.x`, then makes a commit for package.json, tags that commit)\r\n2. `git push --tags origin master`\r\n3. `npm publish`\r\n\r\nGo to https://npmjs.org/package/secure-filters and verify it published (can take several minutes)\r\n\r\n# Support\r\n\r\nEmail [GoInstant Support](mailto:support@goinstant.com) or stop by [#goinstant on freenode](irc://irc.freenode.net#goinstant).\r\n\r\nFor responsible disclosures, email [GoInstant Security](mailto:security@goinstant.com).\r\n\r\nTo [file a bug](https://github.com/goinstant/secure-filters/issues) or\r\n[propose a patch](https://github.com/goinstant/secure-filters/pulls),\r\nplease use github directly.\r\n\r\n# Legal\r\n\r\n&copy; 2013 GoInstant Inc., a salesforce.com company\r\n\r\nLicensed under the BSD 3-clause license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
